cammera offset from world

int offsetMaxX = this.getWidth()*64 - Game.window.getWidth();
int offsetMaxY = this.getHeight()*64 - Game.window.getHeight();
int offsetMinX = 0;
int offsetMinY = 0;
camX = this.entities.get(player).getX() -  Game.window.getWidth() / 2;
camY = this.entities.get(player).getY() - Game.window.getHeight() / 2;

if (camX > offsetMaxX) {
    camX = offsetMaxX;
} else if (camX < offsetMinX) {
    camX = offsetMinX;
    if (camY > offsetMaxY) {
        camY = offsetMaxY;
    }
} else if (camY < offsetMinY) {
    camY = offsetMinY;
}
g.translate(-camX, -camY);
for (BlockRender[] r: mapR) {
    for (BlockRender r1: r) {
        if ((r1.x+r1.width >= camX-64 && r1.x+r1.width<= camX+Game.window.getWidth() +64) && (r1.y+r1.width >= camY-64 && r1.y+r1.width<= camY+Game.window.getHeight() +64)) {
            r1.draw(g);
        }
    }
}
g.translate(camX, camY);

TODO: Should be movd to a general renderer. Also, you should maybe organize STATES for your game.
     States = Screens. MenuState, SplashState, etc. And call their render methods.
private void splashScreen(){
    BufferStrategy bufferstrategy = getBufferStrategy ();

    if (bufferstrategy == null) {
        createBufferStrategy(4);
        return;
    }

    Graphics2D g = (Graphics2D) bufferstrategy.getDrawGraphics();

    try {
        g.drawImage(ImageIO.read(this.getClass().getClassLoader().getResource("tex/loading.png")), 0, 0, null);
        g.setColor(new Color(0xFFFFFF));
        g.setFont(new Font(null, Font.BOLD, 42));
        g.drawString("World is loading.",640-160,320);
    } catch (IOException e) {
        e.printStackTrace();
    }
    g.dispose ();
    bufferstrategy.show();
}

// Should also be moved to a rendering manager.
public void saveCanvas() {
    try {
        BufferedImage image=new BufferedImage(getWidth(), getHeight(),BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = image.createGraphics();

        g.setColor (Color.BLACK);
        g.fillRect (0, 0, getWidth(), getHeight());

        for (Drawable d : drawables) {
            d.draw(g);
        }

        world.draw(g);

        fpsViewer.draw(g);

        g.dispose ();

        File screenshotFolder = new File(".", "screenshots");

        if (screenshotFolder.exists()) {
            File out = new File(screenshotFolder,"Screenshot-" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy_HH-mm-ss")) + ".png");
            if (!out.exists()) {
                out.createNewFile();
                ImageIO.write(image, "png", out);
            } else {
                ImageIO.write(image, "png", out);
            }
        } else {
            screenshotFolder.mkdir();
            File out = new File(screenshotFolder,  "Screenshot-" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy_HH-mm-ss")) + ".png");
            if (!out.exists()) {
                out.createNewFile();
                ImageIO.write(image, "png", out);
            } else {
                ImageIO.write(image, "png", out);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}